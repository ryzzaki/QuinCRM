/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quincrm;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author cuong
 */
public class ImportGUI extends javax.swing.JFrame {
//ARRAYLISTS

    ArrayList<String> storedData = new ArrayList<String>();
    ArrayList<String> analyzedData = new ArrayList<String>();
    ArrayList<String> temporaryList = new ArrayList<String>();
    ArrayList<String> temporaryList2 = new ArrayList<String>();
    ArrayList<String> individualRep = new ArrayList<String>();
    ArrayList<String> salesRep = new ArrayList<String>();
    ArrayList<String> sortList = new ArrayList<String>();
    ArrayList<String> outputTest = new ArrayList<String>();

//IMPORTANT INTEGERS        
    int columnCount = 0, rowCount = 0, NameCount = 0, locationCount = 0;

//IMPORTANT STRINGS
    String filePath;
    String analysisResults = "";
    String logTime;
    String logFile;

    CurrentUser currentUser = new CurrentUser();

    /**
     * Creates new form ImportGUI
     */
    public ImportGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        graphSelector = new javax.swing.JComboBox<>();
        graphSelectLBL = new javax.swing.JLabel();
        generateBTN = new javax.swing.JButton();
        analyzeBTN = new javax.swing.JButton();
        timeSpanLBL = new javax.swing.JLabel();
        timeSpanTXT = new javax.swing.JTextField();
        menuBTN = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logsAreaTXT = new javax.swing.JTextArea();
        viewDataBTN = new javax.swing.JButton();
        viewSnapsBTN = new javax.swing.JButton();
        exportLogsBTN = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pathTXT = new javax.swing.JTextField();
        browseBTN = new javax.swing.JButton();
        importBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        importPreview = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        graphSelector.setBackground(new java.awt.Color(102, 102, 102));
        graphSelector.setForeground(new java.awt.Color(255, 255, 255));
        graphSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bar Chart Sales Reps", "Bar Chart Access Location", "Bar Chart Reps & Location (V)", "Bar Chart Reps & Location (H)", "Bar Chart Time Frequency", "Pie Chart Sales Rep Activity" }));
        graphSelector.setBorder(null);
        graphSelector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                graphSelectorFocusGained(evt);
            }
        });

        graphSelectLBL.setForeground(new java.awt.Color(102, 102, 102));
        graphSelectLBL.setText("Graph Selector");

        generateBTN.setBackground(new java.awt.Color(51, 51, 51));
        generateBTN.setForeground(new java.awt.Color(204, 204, 204));
        generateBTN.setText("Generate Graph");
        generateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBTNActionPerformed(evt);
            }
        });

        analyzeBTN.setBackground(new java.awt.Color(51, 51, 51));
        analyzeBTN.setForeground(new java.awt.Color(204, 204, 204));
        analyzeBTN.setText("Analyse Data");
        analyzeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeBTNActionPerformed(evt);
            }
        });

        timeSpanLBL.setForeground(new java.awt.Color(102, 102, 102));
        timeSpanLBL.setText("Minimum Time Span (Minutes)");

        timeSpanTXT.setBackground(new java.awt.Color(102, 102, 102));
        timeSpanTXT.setForeground(new java.awt.Color(255, 255, 255));
        timeSpanTXT.setBorder(null);
        timeSpanTXT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timeSpanTXTFocusGained(evt);
            }
        });

        menuBTN.setBackground(new java.awt.Color(51, 51, 51));
        menuBTN.setForeground(new java.awt.Color(204, 204, 204));
        menuBTN.setText("Back to Main Menu");
        menuBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBTNActionPerformed(evt);
            }
        });

        jSeparator4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 30)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Import CSV");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 22)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Configurator");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Logs");

        jScrollPane2.setBackground(new java.awt.Color(102, 102, 102));
        jScrollPane2.setBorder(null);
        jScrollPane2.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        logsAreaTXT.setEditable(false);
        logsAreaTXT.setBackground(new java.awt.Color(102, 102, 102));
        logsAreaTXT.setColumns(20);
        logsAreaTXT.setForeground(new java.awt.Color(255, 255, 255));
        logsAreaTXT.setRows(5);
        logsAreaTXT.setAutoscrolls(false);
        logsAreaTXT.setBorder(null);
        jScrollPane2.setViewportView(logsAreaTXT);

        viewDataBTN.setBackground(new java.awt.Color(51, 51, 51));
        viewDataBTN.setForeground(new java.awt.Color(204, 204, 204));
        viewDataBTN.setText("View Data Analysis");
        viewDataBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDataBTNActionPerformed(evt);
            }
        });

        viewSnapsBTN.setBackground(new java.awt.Color(51, 51, 51));
        viewSnapsBTN.setForeground(new java.awt.Color(204, 204, 204));
        viewSnapsBTN.setText("View Saved Graphs");
        viewSnapsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSnapsBTNActionPerformed(evt);
            }
        });

        exportLogsBTN.setBackground(new java.awt.Color(51, 51, 51));
        exportLogsBTN.setForeground(new java.awt.Color(204, 204, 204));
        exportLogsBTN.setText("Export Logs");
        exportLogsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLogsBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(graphSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(graphSelectLBL)
                            .addComponent(timeSpanLBL)
                            .addComponent(timeSpanTXT)
                            .addComponent(analyzeBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generateBTN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(viewDataBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewSnapsBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exportLogsBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeSpanLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeSpanTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphSelectLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(exportLogsBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewDataBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewSnapsBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuBTN)
                .addGap(15, 15, 15))
        );

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Open File Location");

        pathTXT.setBackground(new java.awt.Color(102, 102, 102));
        pathTXT.setForeground(new java.awt.Color(255, 255, 255));
        pathTXT.setBorder(null);
        pathTXT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pathTXTFocusGained(evt);
            }
        });

        browseBTN.setBackground(new java.awt.Color(51, 51, 51));
        browseBTN.setForeground(new java.awt.Color(204, 204, 204));
        browseBTN.setText("Browse");
        browseBTN.setPreferredSize(new java.awt.Dimension(80, 32));
        browseBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBTNActionPerformed(evt);
            }
        });

        importBTN.setBackground(new java.awt.Color(51, 51, 51));
        importBTN.setForeground(new java.awt.Color(204, 204, 204));
        importBTN.setText("Import");
        importBTN.setPreferredSize(new java.awt.Dimension(80, 32));
        importBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBTNActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        importPreview.setBackground(new java.awt.Color(51, 51, 51));
        importPreview.setForeground(new java.awt.Color(255, 255, 255));
        importPreview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        importPreview.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(importPreview);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("CSV Table Preview");

        jSeparator3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pathTXT, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                            .addComponent(jSeparator3))
                        .addGap(12, 12, 12)
                        .addComponent(browseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(importBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(pathTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBTNActionPerformed
        JFileChooser select = new JFileChooser();
        int status = select.showOpenDialog(null);
        if (status == JFileChooser.APPROVE_OPTION) {
            File file = select.getSelectedFile();
            if (file == null) {
                return;
            }

            filePath = select.getSelectedFile().getAbsolutePath();
            pathTXT.setText(filePath);
        }
    }//GEN-LAST:event_browseBTNActionPerformed

    private void importBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBTNActionPerformed
//DEFAULT TABLE MODEL
        DefaultTableModel model = new DefaultTableModel();

        if (pathTXT.getText().isEmpty()) {
            logsAreaTXT.append("Please select a file before importing" + "\n");
        } else if (model.getRowCount() > 0 || model.getColumnCount() > 0) {
            model.setRowCount(0);
            model.setColumnCount(0);
            columnCount = 0;
            rowCount = 0;
            storedData.clear();
            analyzedData.clear();
            temporaryList.clear();
            individualRep.clear();
            salesRep.clear();
            sortList.clear();
            outputTest.clear();
            storedData = new ArrayList<>(0);
            analyzedData = new ArrayList<>(0);
            temporaryList = new ArrayList<>(0);
            temporaryList2 = new ArrayList<>(0);
            individualRep = new ArrayList<>(0);
            salesRep = new ArrayList<>(0);
            sortList = new ArrayList<>(0);
            outputTest = new ArrayList<>(0);
        } else {
            logChat();
            logsAreaTXT.append("[" + logTime + "] Import Started by '" + currentUser.getUsername() + "'" + "\n");
            InputStream fis = null;
            columnCount = 0;
            rowCount = 0;
            storedData.clear();
            analyzedData.clear();
            temporaryList.clear();
            individualRep.clear();
            salesRep.clear();
            sortList.clear();
            outputTest.clear();
            storedData = new ArrayList<>(0);
            analyzedData = new ArrayList<>(0);
            temporaryList = new ArrayList<>(0);
            temporaryList2 = new ArrayList<>(0);
            individualRep = new ArrayList<>(0);
            salesRep = new ArrayList<>(0);
            sortList = new ArrayList<>(0);
            outputTest = new ArrayList<>(0);
//START THE TRY AND CATCH
            try {
                String line;
                int cc, ccc, min, size, counter;
                String convert;
                String merge;
                boolean firstRun = true, quoteStatus = false;
                fis = new FileInputStream(filePath);
                InputStreamReader isr = new InputStreamReader(fis, Charset.forName("UTF-8"));
                BufferedReader br = new BufferedReader(isr);

//WHILE LOOP TO SEPARATE VALUES FROM COMMAS
                while ((line = br.readLine()) != null) {
                    min = 0;
                    merge = "";
                    size = line.length();
                    System.out.println(size);

                    while (min != size) {
                        convert = line.substring(min, min + 1);
                        if (!convert.equals(",") && !convert.equals("\"") && quoteStatus == false) {
                            if (firstRun == true && min == size - 1) {
                                merge = merge + convert;
                                storedData.add(merge);
                                columnCount++;
                            } else if (min == size - 1) {
                                merge = merge + convert;
                                storedData.add(merge);
                            } else {
                                merge = merge + convert;
                            }
                        } else if (convert.equals("\"") || "\"".equals(convert)) {
                            quoteStatus = !quoteStatus;
                        } else {
                            if (quoteStatus == false) {
                                storedData.add(merge);
                                merge = "";
                                if (firstRun == true) {
                                    columnCount++;
                                    if (!",".equals(convert) || !convert.equals(",") && min == size - 1) {
                                        columnCount++;
                                        storedData.add(" ");
                                    }
                                }
                            } else {
                                merge = merge + convert;
                            }
                        }
                        min++;
                    }

                    rowCount++;
                    firstRun = false;
                }

//GET COLUMN NAMES AND SET
                model.setRowCount(0);
                model.setColumnCount(columnCount);
                importPreview.setModel(model);
                for (int h = 0; h < columnCount; h++) {
                    importPreview.getTableHeader().getColumnModel().getColumn(h).setHeaderValue(storedData.get(h));
                }

//GET DATA AND SET
                ccc = columnCount;
                cc = 0;
                String[] row = new String[storedData.size()];
                for (int b = 0; b < storedData.size() && b < 2500; b++) {
                    if (cc == columnCount) {
                        cc = 0;
                    }

                    row[cc] = storedData.get(ccc);
                    ccc++;
                    cc++;

                    if (cc == columnCount) {
                        model.addRow(row);
                    }
                }

                //LOAD SALES REPS
                for (int i = 1; (i * 17) - 9 <= storedData.size(); i++) {
                    counter = 0;
                    for (int o = 0; o < temporaryList.size(); o++) {
                        if (storedData.get((i * 17) - 9).equals(temporaryList.get(o))) {
                            counter++;
                        }
                    }
                    if (counter == 0) {
                        temporaryList.add(storedData.get((i * 17) - 9));
                        NameCount++;
                    }
                }

                //LOAD ACCESS LOCATION
                for (int i = 1; (i * 17) - 11 <= storedData.size(); i++) {
                    counter = 0;
                    for (int o = 0; o < temporaryList2.size(); o++) {
                        if (storedData.get((i * 17) - 11).equals(temporaryList2.get(o))) {
                            counter++;
                        }
                    }
                    if (counter == 0) {
                        temporaryList2.add(storedData.get((i * 17) - 11));
                        locationCount++;
                    }
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            //LogChat
            logChat();
            logsAreaTXT.append("[" + logTime + "] Imported CSV [" + filePath + "]" + "\n");
        }
    }//GEN-LAST:event_importBTNActionPerformed

    private void analyzeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeBTNActionPerformed
        logChat();
        logsAreaTXT.append("[" + logTime + "] Analysis Started by '" + currentUser.getUsername() + "'" + "\n");

        int row = 0, counter = 0, CCC = 0, C1 = 0, C2 = 0;
        boolean poll = false, firstRun1 = true, firstRun2 = true, firstRun3 = true;
        String[] stringSort = new String[4];

//NULLIFY
        NameCount = 0;
        analyzedData.clear();
        temporaryList.clear();

//LOAD IMPORTANT VALUES
        for (int a = 1; columnCount * a + 8 < storedData.size(); a++) {
            analyzedData.add(storedData.get(columnCount * a));

            analyzedData.add(storedData.get((columnCount * a) + 1));

            analyzedData.add(storedData.get((columnCount * a) + 3));

            analyzedData.add(storedData.get((columnCount * a) + 8));
        }

//GET TIME VALUES
        for (int i = 1; 2 * i < analyzedData.size(); i++) {
            if (poll == false) {
                if (!analyzedData.get(2 * i).equals("")) {
                    analyzedData.set(2 * i, analyzedData.get(2 * i).substring(11));
                    for (int o = 0; o < analyzedData.get(2 * i).length(); o++) {
                        analysisResults = analyzedData.get(2 * i).substring(o, o + 1);
                        if (":".equals(analysisResults)) {
                            CCC = Integer.parseInt(analyzedData.get(2 * i).substring(0, o));
                            analyzedData.set(2 * i, analyzedData.get(2 * i).substring(o));
                            break;
                        }
                    }
                    CCC = CCC * 3600;
                    CCC = CCC + (Integer.parseInt(analyzedData.get(2 * i).substring(1, 3)) * 60);
                    analyzedData.set(2 * i, Integer.toString(CCC));
                }
                poll = true;
            } else {
                poll = false;
            }
        }
        analysisResults = "";

//LOAD SALES REPS TO ARRAYLIST
        for (int i = 1; (i * 17) - 9 <= storedData.size(); i++) {
            counter = 0;
            for (int o = 0; o < temporaryList.size(); o++) {
                if (storedData.get((i * 17) - 9).equals(temporaryList.get(o))) {
                    counter++;
                }
            }
            if (counter == 0) {
                temporaryList.add(storedData.get((i * 17) - 9));
                NameCount++;
            }
        }

//SORT SALES REPS BY THEIR NAMES
        while (!temporaryList.isEmpty()) {
            for (int i = 1; (i * 4) - 1 < analyzedData.size(); i++) {
                if (temporaryList.get(0).equals(analyzedData.get((i * 4) - 1))) {
                    individualRep.add(analyzedData.get((i * 4) - 4));
                    individualRep.add(analyzedData.get((i * 4) - 3));
                    individualRep.add(analyzedData.get((i * 4) - 2));
                    individualRep.add(analyzedData.get((i * 4) - 1));
                }
            }
            salesRep.add(temporaryList.get(0));
            temporaryList.remove(0);
        }
        analyzedData.clear();
        for (int i = 0; i < individualRep.size(); i++) {
            analyzedData.add(individualRep.get(i));
        }
        individualRep.clear();

//FIND BLANK CELLS AND REPORT ERRORS
        counter = 0;
        while (!salesRep.isEmpty()) {
            row = 0;
            if (firstRun2 == true) {
                for (int p = 0; p < 35; p++) {
                    for (int i = 1; (i * 4) - 2 < analyzedData.size(); i++) {
                        if ((analyzedData.get((i * 4) - 2).length() < 1)) {
                            logChat();
                            analysisResults = analysisResults + "[" + logTime + "]" + " MISSING TIME ERROR @ ACTIVITY ID " + analyzedData.get((i * 4) - 4) + "\n";
                            for (int o = 4; o > 0; o--) {
                                analyzedData.remove((i * 4) - 4);
                            }
                        }
                    }
                }
                firstRun2 = false;
            }

//FIND TIME SPAN ERRORS
            for (int i = 1; (i * 4) - 3 < analyzedData.size() - 1 && !analyzedData.get((i * 4) - 3).equals(salesRep.get(0)); i++) {
                //DUMP = XX:XX:XX
                if (temporaryList.isEmpty()) {
                    temporaryList.add(analyzedData.get((i * 4) - 3));
                }
                for (int o = 0; o < temporaryList.size(); o++) {
                    counter = 1;
                    if (analyzedData.get((i * 4) - 3).equals(temporaryList.get(o))) {
                        counter = 0;
                        break;
                    }
                }
                if (counter == 1) {
                    temporaryList.add(analyzedData.get((i * 4) - 3));
                }
                row++;
            }
            counter = 0;
            while (counter < temporaryList.size()) {
                for (int i = 1; (i * 4) - 1 < analyzedData.size(); i++) {
                    if (analyzedData.get((i * 4) - 3).equals(temporaryList.get(counter)) && analyzedData.get((i * 4) - 1).equals(salesRep.get(0))) {
                        sortList.add(analyzedData.get((i * 4) - 4));
                        sortList.add(analyzedData.get((i * 4) - 3));
                        sortList.add(analyzedData.get((i * 4) - 2));
                        sortList.add(analyzedData.get((i * 4) - 1));
                        if (firstRun3 == true) {
                            firstRun3 = false;
                        } else {
                            for (int o = 1; (o * 4) + 3 < sortList.size(); o++) {
                                if (Integer.parseInt(sortList.get((o * 4) - 2)) < Integer.parseInt(sortList.get((o * 4) + 2))) {
                                    stringSort[0] = sortList.get((o * 4));
                                    sortList.set((o * 4), sortList.get((o * 4) - 4));
                                    sortList.set(((o * 4) - 4), stringSort[0]);

                                    stringSort[0] = sortList.get((o * 4) + 1);
                                    sortList.set((o * 4) + 1, sortList.get((o * 4) - 3));
                                    sortList.set(((o * 4) - 3), stringSort[0]);

                                    stringSort[0] = sortList.get((o * 4) + 2);
                                    sortList.set((o * 4) + 2, sortList.get((o * 4) - 2));
                                    sortList.set(((o * 4) - 2), stringSort[0]);

                                    stringSort[0] = sortList.get((o * 4) + 3);
                                    sortList.set((o * 4) + 3, sortList.get((o * 4) - 1));
                                    sortList.set(((o * 4) - 1), stringSort[0]);
                                    o = 1;
                                }

                                if (Integer.parseInt(sortList.get(2)) < Integer.parseInt(sortList.get(6))) {
                                    stringSort[0] = sortList.get((4));
                                    sortList.set(4, sortList.get(0));
                                    sortList.set(0, stringSort[0]);

                                    stringSort[0] = sortList.get(5);
                                    sortList.set(5, sortList.get(1));
                                    sortList.set(1, stringSort[0]);

                                    stringSort[0] = sortList.get(6);
                                    sortList.set(6, sortList.get(2));
                                    sortList.set(2, stringSort[0]);

                                    stringSort[0] = sortList.get(7);
                                    sortList.set(7, sortList.get(3));
                                    sortList.set(3, stringSort[0]);
                                    o = 1;
                                }
                            }

                        }

                    }
                }
                for (int o = 0; o < sortList.size(); o++) {
                    if (timeSpanTXT.getText().matches("[0-9]+")) {
                        if ((o + 1) * 4 < sortList.size()) {
                            C1 = Integer.parseInt(sortList.get((((o + 1) * 4)) - 2));
                            C2 = Integer.parseInt(sortList.get(((o + 1) * 4) + 2));
                            C2 = C1 - C2;
                            C1 = Integer.parseInt(timeSpanTXT.getText());
                        }
                        if ((o + 1) * 4 < sortList.size() && (C2 < C1)) {
                            System.out.println(sortList.get((((o + 1) * 4)) - 2));
                            System.out.println(sortList.get(((o + 1) * 4) + 2));
                            logChat();
                            analysisResults = analysisResults + "[" + logTime + "]" + " TIME SPAN ERROR @ ACTIVITY IDs " + sortList.get(((o + 1) * 4) - 4) + " & " + sortList.get((o + 1) * 4) + "\n";
                        }
                    }
                    outputTest.add(sortList.get(o));
                }
                sortList.clear();
                counter++;
            }
            //start max C1 C2

            salesRep.remove(0);
        }
        temporaryList.clear();

//TEST OUTPUT
        for (int i = 1; i <= outputTest.size(); i++) {
            if (i % 4 == 0 && i != 0) {
                System.out.print(outputTest.get(i - 1) + "\n");
            } else {
                System.out.print(outputTest.get(i - 1) + " ");
            }
        }
        System.out.println(analysisResults);

//LOG CHAT
        logChat();
        logsAreaTXT.append(analysisResults);
        logChat();
        logsAreaTXT.append("[" + logTime + "] Analysis Complete" + "\n");
    }//GEN-LAST:event_analyzeBTNActionPerformed

    private void generateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBTNActionPerformed
        //Select from combo box
        String chartType = graphSelector.getSelectedItem().toString();

        //Use switch to navigate cases from combo box
        switch (chartType) {
            case "Bar Chart Sales Reps":
                System.out.println("Bar Chart Sales Reps");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generateBarSR();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            case "Bar Chart Access Location":
                System.out.println("Bar Chart Access Location");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generateBarAL();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            case "Bar Chart Reps & Location (V)":
                System.out.println("Bar Chart Reps and Location");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generateBarRALVERT();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            case "Bar Chart Reps & Location (H)":
                System.out.println("Bar Chart Reps and Location");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generateBarRALHORI();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            case "Bar Chart Time Frequency":
                System.out.println("Bar Chart Time Frequency");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generateBarTF();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            case "Pie Chart Sales Rep Activity":
                System.out.println("Pie Chart Sales Rep Activity");
                //start
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Generated by user '" + currentUser.getUsername() + "'" + "\n");

                //call method
                generatePieSRA();

                //end
                logChat();
                logsAreaTXT.append("[" + logTime + "] '" + chartType + "' Saved into Graphs folder" + "\n");
                break;

            default:
                break;
        }

    }//GEN-LAST:event_generateBTNActionPerformed

    private void viewDataBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDataBTNActionPerformed
        logChat();
        logsAreaTXT.append("[" + logTime + "] User '" + currentUser.getUsername() + "'" + " opened Logs Folder" + "\n");
        try {
            Desktop.getDesktop().open(new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Logs"));
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewDataBTNActionPerformed

    private void viewSnapsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSnapsBTNActionPerformed
        logChat();
        logsAreaTXT.append("[" + logTime + "] User '" + currentUser.getUsername() + "'" + " opened Graphs Folder" + "\n");
        try {
            Desktop.getDesktop().open(new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs"));
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewSnapsBTNActionPerformed

    private void menuBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBTNActionPerformed
//Free The Memory When You Leave
        storedData.clear();
        analyzedData.clear();
        temporaryList.clear();
        individualRep.clear();
        salesRep.clear();
        sortList.clear();
        outputTest.clear();

        storedData = new ArrayList<>(0);
        analyzedData = new ArrayList<>(0);
        temporaryList = new ArrayList<>(0);
        individualRep = new ArrayList<>(0);
        salesRep = new ArrayList<>(0);
        sortList = new ArrayList<>(0);
        outputTest = new ArrayList<>(0);

//GARBAGE COLLECTOR
        System.gc();

//Show Main Menu
        MainGUI show = new MainGUI();
        show.setVisible(true);
        show.setLocationRelativeTo(null);
        this.setVisible(false);
    }//GEN-LAST:event_menuBTNActionPerformed

    private void exportLogsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLogsBTNActionPerformed
//LogChat
        logChat();
        logsAreaTXT.append("[" + logTime + "] Logs Exported by '" + currentUser.getUsername() + "'" + "\n");

//Exporting Algorithm
        exportLogs();
    }//GEN-LAST:event_exportLogsBTNActionPerformed

    private void graphSelectorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_graphSelectorFocusGained
//Gain Label Focus When Clicked
        graphSelectLBL.setForeground(new Color(255, 255, 255));

//Default Label Focus
        timeSpanLBL.setForeground(new Color(153, 153, 153));
    }//GEN-LAST:event_graphSelectorFocusGained

    private void timeSpanTXTFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeSpanTXTFocusGained
//Gain Label Focus When Clicked
        timeSpanLBL.setForeground(new Color(255, 255, 255));

//Default Label Focus
        graphSelectLBL.setForeground(new Color(153, 153, 153));

//set Caret Color
        timeSpanTXT.setCaretColor(Color.WHITE);
    }//GEN-LAST:event_timeSpanTXTFocusGained

    private void pathTXTFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pathTXTFocusGained
        //set Caret Color
        pathTXT.setCaretColor(Color.WHITE);
    }//GEN-LAST:event_pathTXTFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeBTN;
    private javax.swing.JButton browseBTN;
    private javax.swing.JButton exportLogsBTN;
    private javax.swing.JButton generateBTN;
    private javax.swing.JLabel graphSelectLBL;
    private javax.swing.JComboBox<String> graphSelector;
    private javax.swing.JButton importBTN;
    private javax.swing.JTable importPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextArea logsAreaTXT;
    private javax.swing.JButton menuBTN;
    private javax.swing.JTextField pathTXT;
    private javax.swing.JLabel timeSpanLBL;
    private javax.swing.JTextField timeSpanTXT;
    private javax.swing.JButton viewDataBTN;
    private javax.swing.JButton viewSnapsBTN;
    // End of variables declaration//GEN-END:variables

    //TIME FORMATS FOR LOG CHAT AND FOR FILE NAME
    public void logChat() {
        DateFormat timeLog = new SimpleDateFormat("dd/MM/yyyy, HH:mm:ss");
        Date rewindDate = new Date();
        logTime = timeLog.format(rewindDate);
    }

    public void logFormatFile() {
        DateFormat timeLog = new SimpleDateFormat("dd-MM-yyyy, HH-mm-ss");
        Date rewindDate = new Date();
        logFile = timeLog.format(rewindDate);
    }

    //EXPORTING ALGORITHM
    public void exportLogs() {
        final BufferedWriter buff;
        //FORMAT THE FILES INTO BROKEN LINES
        try {
            buff = new BufferedWriter(new FileWriter(new File(currentUser.getUserPC() + "\\Desktop\\QuinTemporary.txt")));
            for (String line : logsAreaTXT.getText().split("\\n")) {
                //WRITE
                buff.append(line);
                buff.newLine();
            }
            //CLOSE THE FILE AND DON'T MESS WITH IT
            buff.close();
        } catch (Exception e) {
            System.out.println("nope");
        }
        //WORKAROUND FOR THE ACCESS DENIED PROBLEM
        //MOVE THE FILE ALGORITHM
        logFormatFile();
        Path source = Paths.get(currentUser.getUserPC() + "\\Desktop\\QuinTemporary.txt");
        Path destination = Paths.get(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Logs\\Logs " + logFile + ".txt");
        try {
            Files.move(source, destination, REPLACE_EXISTING);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //GRAPHING ALGORITHMS
    public void generateBarSR() {
//START GETTING ALL NAMES
        int IndividualEmployeeCount = 0, countAppearances = 0;
        System.out.println(NameCount);
        String Names[] = new String[NameCount + NameCount];
        for (int i = 0; i < NameCount; i++) {
            Names[i] = " ";
        }
        boolean NameCheck = false;
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (IndividualEmployeeCount != NameCount) {
                for (int o = 0; o < NameCount; o++) {
                    for (int p = 0; p < NameCount; p++) {
                        if (Names[p].equals(storedData.get((i * 17) - 9))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Names[o].equals(storedData.get((i * 17) - 9))) && Names[o].equals(" ") && NameCheck == false) {
                        Names[o] = storedData.get((i * 17) - 9);
                    }
                    NameCheck = false;
                }
            }
        }
//START COUNTING APPEARANCES
        for (int i = 0; i < NameCount; i++) {
            countAppearances = 0;
            for (int o = 1; (o * 17) - 9 < rowCount * columnCount; o++) {
                if (Names[i].equals(storedData.get((o * 17) - 9))) {
                    countAppearances = countAppearances + 1;
                    System.out.println(storedData.get((o * 17) - 17) + " " + storedData.get((o * 17) - 9));
                }
            }
            Names[i + NameCount] = Integer.toString(countAppearances);
        }
        for (int i = 0; i < NameCount; i++) {
            System.out.println(Names[i] + " - " + Names[i + NameCount]);
        }

        //LOOP DATASET
        DefaultCategoryDataset barSR = new DefaultCategoryDataset();
        for (int x = 0; x < NameCount - 1; x++) {
            barSR.setValue(Integer.parseInt(Names[x + NameCount]), "Number of Pharmaceutical Check-ins per Sales Rep", Names[x]);
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart barChart = ChartFactory.createBarChart("Individual Sales Rep Visits @ " + logTime, "Individual Sales Rep Name", "Number of Visits", barSR, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot plot = barChart.getCategoryPlot();
        //GRIDLINE
        plot.setRangeGridlinePaint(Color.black);
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime, barChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(1366, 800);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, barChart, 1900, 1000, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generateBarAL() {
        //START GETTING ALL NAMES
        int IndividualEmployeeCount = 0, countAppearances = 0;
        System.out.println(locationCount);
        String Names[] = new String[locationCount + locationCount];
        for (int i = 0; i < locationCount; i++) {
            Names[i] = " ";
        }
        boolean NameCheck = false;
        for (int i = 2; (i * 17) - 11 <= storedData.size(); i++) {
            if (IndividualEmployeeCount != locationCount) {
                for (int o = 0; o < locationCount; o++) {
                    for (int p = 0; p < locationCount; p++) {
                        if (Names[p].equals(storedData.get((i * 17) - 11))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Names[o].equals(storedData.get((i * 17) - 11))) && Names[o].equals(" ") && NameCheck == false) {
                        Names[o] = storedData.get((i * 17) - 11);
                    }
                    NameCheck = false;
                }
            }
        }
//FINISH GETTING ALL NAMES
//START COUNTING APPEARANCES
        for (int i = 0; i < locationCount; i++) {
            countAppearances = 0;
            for (int o = 1; (o * 17) - 11 < rowCount * columnCount; o++) {
                if (Names[i].equals(storedData.get((o * 17) - 11))) {
                    countAppearances = countAppearances + 1;
                    System.out.println(storedData.get((o * 17) - 17) + " " + storedData.get((o * 17) - 11));
                }
            }
            Names[i + locationCount] = Integer.toString(countAppearances);
        }
        for (int i = 0; i < locationCount; i++) {
            System.out.println(Names[i] + " - " + Names[i + locationCount]);
        }

        //LOOP DATASET
        DefaultCategoryDataset barSR = new DefaultCategoryDataset();
        for (int x = 0; x < locationCount - 1; x++) {
            barSR.setValue(Integer.parseInt(Names[x + locationCount]), "Number of Accesses from Various Types of Devices", Names[x]);
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart barChart = ChartFactory.createBarChart("Total Type of Access Location @ " + logTime, "Access Type", "Number of Accesses", barSR, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot plot = barChart.getCategoryPlot();
        //GRIDLINE
        plot.setRangeGridlinePaint(Color.black);
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime + " by " + currentUser.getFname(), barChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(900, 700);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, barChart, 1900, 1000, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generateBarRALVERT() {
        //START GETTING ALL NAMES
        int IndividualEmployeeCount = 0, countAppearances = 0;
        System.out.println(NameCount);
        String Names[] = new String[NameCount];
        for (int i = 0; i < NameCount; i++) {
            Names[i] = " ";
        }
        boolean NameCheck = false;
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (IndividualEmployeeCount != NameCount) {
                for (int o = 0; o < NameCount; o++) {
                    for (int p = 0; p < NameCount; p++) {
                        if (Names[p].equals(storedData.get((i * 17) - 9))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Names[o].equals(storedData.get((i * 17) - 9))) && Names[o].equals(" ") && NameCheck == false) {
                        Names[o] = storedData.get((i * 17) - 9);
                    }
                    NameCheck = false;
                }
            }
        }

//START GETTING ALL AccessLocations
        int individualLocations = 0;
        System.out.println(locationCount);
        String Locations[] = new String[(locationCount - 1) + ((NameCount - 1) * (locationCount - 1))];
        for (int i = 0; i < ((locationCount - 1) + ((NameCount - 1) * (locationCount - 1))); i++) {
            Locations[i] = " ";
        }
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (individualLocations != NameCount) {
                for (int o = 0; o < locationCount; o++) {
                    for (int p = 0; p < locationCount; p++) {
                        if (Locations[p].equals(storedData.get((i * 17) - 11))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Locations[o].equals(storedData.get((i * 17) - 11))) && Locations[o].equals(" ") && NameCheck == false) {
                        Locations[o] = storedData.get((i * 17) - 11);
                    }
                    NameCheck = false;
                }
            }
        }
        //START COUNTING APPEARANCES SR->
        int counter = locationCount - 1;
        for (int e = 0; e < NameCount - 1; e++) {
            for (int i = 0; i < locationCount - 1; i++) {
                countAppearances = 0;
                for (int o = 1; (o * 17) - 9 < rowCount * columnCount; o++) {
                    if (Names[e].equals(storedData.get((o * 17) - 9)) && Locations[i].equals(storedData.get((o * 17) - 11))) {
                        countAppearances = countAppearances + 1;
                        System.out.println(storedData.get((o * 17) - 9) + " " + storedData.get((o * 17) - 11));
                    }
                }
                Locations[counter] = Integer.toString(countAppearances);
                counter++;
            }
        }

        for (int i = 0; i < ((locationCount - 1) + ((NameCount - 1) * (locationCount - 1))); i++) {
            System.out.println(Locations[i]);
        }

        //GRAPHING
        int arithmeticSeries = 0;
        int arithmeticSeries2 = 1;

        DefaultCategoryDataset barRAL = new DefaultCategoryDataset();
        //LOOP DATASET
        for (int x = 2; x < Names.length + 1; x++) {
            //iPAD
            barRAL.addValue(Integer.parseInt(Locations[x + arithmeticSeries]), Locations[0], Names[x - 2]);
            System.out.println("Value: " + Integer.parseInt(Locations[x + arithmeticSeries]) + " Type: " + Locations[0] + " Sales Rep Name: " + Names[x - 2]);
            //WEB
            barRAL.addValue(Integer.parseInt(Locations[x + arithmeticSeries2]), Locations[1], Names[x - 2]);
            System.out.println("Value: " + Integer.parseInt(Locations[x + arithmeticSeries2]) + " Type: " + Locations[1] + " Sales Rep Name: " + Names[x - 2]);

            arithmeticSeries = arithmeticSeries + 1;
            arithmeticSeries2 = arithmeticSeries2 + 1;
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart barChart = ChartFactory.createStackedBarChart("Individual Sales Rep Access Types @ " + logTime, "Sales Rep Name", "Number of Accesses", barRAL, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot plot = barChart.getCategoryPlot();
        //GRIDLINE
        plot.setRangeGridlinePaint(Color.black);
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime + " by " + currentUser.getFname(), barChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(1366, 800);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, barChart, 1900, 1000, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generateBarRALHORI() {
        //START GETTING ALL NAMES
        int IndividualEmployeeCount = 0, countAppearances = 0;
        System.out.println(NameCount);
        String Names[] = new String[NameCount];
        for (int i = 0; i < NameCount; i++) {
            Names[i] = " ";
        }
        boolean NameCheck = false;
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (IndividualEmployeeCount != NameCount) {
                for (int o = 0; o < NameCount; o++) {
                    for (int p = 0; p < NameCount; p++) {
                        if (Names[p].equals(storedData.get((i * 17) - 9))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Names[o].equals(storedData.get((i * 17) - 9))) && Names[o].equals(" ") && NameCheck == false) {
                        Names[o] = storedData.get((i * 17) - 9);
                    }
                    NameCheck = false;
                }
            }
        }

//START GETTING ALL AccessLocations
        int individualLocations = 0;
        System.out.println(locationCount);
        String Locations[] = new String[(locationCount - 1) + ((NameCount - 1) * (locationCount - 1))];
        for (int i = 0; i < ((locationCount - 1) + ((NameCount - 1) * (locationCount - 1))); i++) {
            Locations[i] = " ";
        }
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (individualLocations != NameCount) {
                for (int o = 0; o < locationCount; o++) {
                    for (int p = 0; p < locationCount; p++) {
                        if (Locations[p].equals(storedData.get((i * 17) - 11))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Locations[o].equals(storedData.get((i * 17) - 11))) && Locations[o].equals(" ") && NameCheck == false) {
                        Locations[o] = storedData.get((i * 17) - 11);
                    }
                    NameCheck = false;
                }
            }
        }
        //START COUNTING APPEARANCES SR->
        int counter = locationCount - 1;
        for (int e = 0; e < NameCount - 1; e++) {
            for (int i = 0; i < locationCount - 1; i++) {
                countAppearances = 0;
                for (int o = 1; (o * 17) - 9 < rowCount * columnCount; o++) {
                    if (Names[e].equals(storedData.get((o * 17) - 9)) && Locations[i].equals(storedData.get((o * 17) - 11))) {
                        countAppearances = countAppearances + 1;
                        System.out.println(storedData.get((o * 17) - 9) + " " + storedData.get((o * 17) - 11));
                    }
                }
                Locations[counter] = Integer.toString(countAppearances);
                counter++;
            }
        }

        for (int i = 0; i < ((locationCount - 1) + ((NameCount - 1) * (locationCount - 1))); i++) {
            System.out.println(Locations[i]);
        }

        //GRAPHING
        int arithmeticSeries = 0;
        int arithmeticSeries2 = 1;

        DefaultCategoryDataset barRAL = new DefaultCategoryDataset();
        //LOOP DATASET
        for (int x = 2; x < Names.length + 1; x++) {
            //iPAD
            barRAL.addValue(Integer.parseInt(Locations[x + arithmeticSeries]), Locations[0], Names[x - 2]);
            System.out.println("Value: " + Integer.parseInt(Locations[x + arithmeticSeries]) + " Type: " + Locations[0] + " Sales Rep Name: " + Names[x - 2]);
            //WEB
            barRAL.addValue(Integer.parseInt(Locations[x + arithmeticSeries2]), Locations[1], Names[x - 2]);
            System.out.println("Value: " + Integer.parseInt(Locations[x + arithmeticSeries2]) + " Type: " + Locations[1] + " Sales Rep Name: " + Names[x - 2]);

            arithmeticSeries++;
            arithmeticSeries2++;
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart barChart = ChartFactory.createStackedBarChart("Individual Sales Rep Access Types @ " + logTime, "Sales Rep Name", "Number of Accesses", barRAL, PlotOrientation.HORIZONTAL, true, true, false);
        CategoryPlot plot = barChart.getCategoryPlot();
        //GRIDLINE
        plot.setRangeGridlinePaint(Color.black);
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime + " by " + currentUser.getFname(), barChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(1366, 800);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, barChart, 1900, 1000, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generateBarTF() {
        int Time[] = new int[24];
        for (int i = 2; (i * 17) - 14 < storedData.size(); i++) {
            if (3 < storedData.get((i * 17) - 14).length()) {
                System.out.println(storedData.get((i * 17) - 14));
                switch (Integer.parseInt((storedData.get((i * 17) - 14)).substring(11, 13))) {
                    case 1:
                        Time[0]++;
                        break;
                    case 2:
                        Time[1]++;
                        break;
                    case 3:
                        Time[2]++;
                        break;
                    case 4:
                        Time[3]++;
                        break;
                    case 5:
                        Time[4]++;
                        break;
                    case 6:
                        Time[5]++;
                        break;
                    case 7:
                        Time[6]++;
                        break;
                    case 8:
                        Time[7]++;
                        break;
                    case 9:
                        Time[8]++;
                        break;
                    case 10:
                        Time[9]++;
                        break;
                    case 11:
                        Time[10]++;
                        break;
                    case 12:
                        Time[11]++;
                        break;
                    case 13:
                        Time[12]++;
                        break;
                    case 14:
                        Time[13]++;
                        break;
                    case 15:
                        Time[14]++;
                        break;
                    case 16:
                        Time[15]++;
                        break;
                    case 17:
                        Time[16]++;
                        break;
                    case 18:
                        Time[17]++;
                        break;
                    case 19:
                        Time[18]++;
                        break;
                    case 20:
                        Time[19]++;
                        break;
                    case 21:
                        Time[20]++;
                        break;
                    case 22:
                        Time[21]++;
                        break;
                    case 23:
                        Time[22]++;
                        break;
                    case 24:
                        Time[23]++;
                        break;
                    default:
                        break;
                }
            }
        }
        //LOOP DATASET
        DefaultCategoryDataset barSR = new DefaultCategoryDataset();
        int hourCount = 1;
        for (int x = 0; x < Time.length; x++) {
            barSR.setValue(Time[x], "Number of Visits per Specific Hour", Integer.toString(hourCount));
            hourCount++;
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart barChart = ChartFactory.createBarChart("Frequent Hourly Visits @ " + logTime, "Time", "Number of Visits", barSR, PlotOrientation.VERTICAL, true, true, false);
        CategoryPlot plot = barChart.getCategoryPlot();
        //GRIDLINE
        plot.setRangeGridlinePaint(Color.black);
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime, barChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(1366, 800);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, barChart, 1900, 1000, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generatePieSRA() {
//START GETTING ALL NAMES
        int IndividualEmployeeCount = 0, countAppearances = 0;
        System.out.println(NameCount);
        String Names[] = new String[NameCount + NameCount];
        for (int i = 0; i < NameCount; i++) {
            Names[i] = " ";
        }
        boolean NameCheck = false;
        for (int i = 2; (i * 17) - 9 <= storedData.size(); i++) {
            if (IndividualEmployeeCount != NameCount) {
                for (int o = 0; o < NameCount; o++) {
                    for (int p = 0; p < NameCount; p++) {
                        if (Names[p].equals(storedData.get((i * 17) - 9))) {
                            NameCheck = true;
                        }
                    }
                    if (!(Names[o].equals(storedData.get((i * 17) - 9))) && Names[o].equals(" ") && NameCheck == false) {
                        Names[o] = storedData.get((i * 17) - 9);
                    }
                    NameCheck = false;
                }
            }
        }
//FINISH GETTING ALL NAMES

//START COUNTING APPEARANCES
        for (int i = 0; i < NameCount; i++) {
            countAppearances = 0;
            for (int o = 1; (o * 17) - 9 < rowCount * columnCount; o++) {
                if (Names[i].equals(storedData.get((o * 17) - 9))) {
                    countAppearances = countAppearances + 1;
                    System.out.println(storedData.get((o * 17) - 17) + " " + storedData.get((o * 17) - 9));
                }
            }
            Names[i + NameCount] = Integer.toString(countAppearances);
        }
        for (int i = 0; i < NameCount; i++) {
            System.out.println(Names[i] + " - " + Names[i + NameCount]);
        }

        //LOOP DATASET
        DefaultPieDataset pieSR = new DefaultPieDataset();
        for (int x = 0; x < NameCount - 1; x++) {
            pieSR.setValue(Names[x], Integer.parseInt(Names[x + NameCount]));
        }

        //THEME
        ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
        //CREATE
        logChat();
        JFreeChart pieChart = ChartFactory.createPieChart("Individual Sales Rep Visits @ " + logTime, pieSR, true, true, false);
        //LEGEND
        PiePlot plotPie = (PiePlot) pieChart.getPlot();
        plotPie.setLegendLabelGenerator(new StandardPieSectionLabelGenerator("{0}: {2}"));
        //SHOW CHART
        ChartFrame frame = new ChartFrame("QuinCRM - Generated Graph @ " + logTime, pieChart, true);
        //RefineryUtilities.centerFrameOnScreen( frame );
        frame.setVisible(true);
        frame.setSize(1366, 900);
        //Render Charts
        logFormatFile();
        final ChartRenderingInfo render = new ChartRenderingInfo(new StandardEntityCollection());
        final File saveChart = new File(currentUser.getUserPC() + "\\Documents\\QuinCRM\\" + currentUser.getUsername() + "\\Graphs\\" + graphSelector.getSelectedItem().toString() + " " + logFile + ".png");
        try {
            ChartUtilities.saveChartAsPNG(saveChart, pieChart, 1920, 1080, render);
        } catch (IOException ex) {
            Logger.getLogger(ImportGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
